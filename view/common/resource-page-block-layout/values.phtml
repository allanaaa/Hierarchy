<?php
$translate = $this->plugin('translate');
if ($resource->getControllerName() == 'item-set') {
    $groupings = $this->api()->search('item_hierarchy_grouping', ['item_set' => $resource->id(), 'sort_by' => 'position'])->getContent();
    $iterate = function ($groupings, $resource) use (&$iterate, &$allGroupings, &$printedGroupings, &$currentHierarchy, &$childCount) {
        foreach ($groupings as $key => $grouping) {
            // Continue if grouping has already been printed
            if (isset($printedGroupings) && in_array($grouping, $printedGroupings)) {
                continue;
            }

            if ($currentHierarchy != $grouping->getHierarchy()) {
                if (!is_null($currentHierarchy)) {
                    echo '</ul></span></dd>';
                }
                echo '<dd class="value"><span class="value-content"><ul>';
                $currentHierarchy = $grouping->getHierarchy();
                $allGroupings = $this->api()->search('item_hierarchy_grouping', ['hierarchy' => $currentHierarchy, 'sort_by' => 'position'])->getContent();
            }

            if ($grouping->getParentGrouping() != 0) {
                // $iterate through any groupings with current grouping as child
                $parentArray = array_filter($allGroupings, function($parent) use($grouping) {
                    return $parent->id() == $grouping->getParentGrouping();
                });
                if (count($parentArray) > 0) {
                    $iterate($parentArray, $resource);
                    continue;
                }
            }

            try {
                $itemSet = $this->api()->read('item_sets', $grouping->getItemSet())->getContent();
            } catch (\Exception $e) {
                // Print groupings without assigned itemSet
                $itemSet = null;
                echo '<li>' . $grouping->getLabel() . '</li>';
            }
            
            if (!is_null($itemSet)) {
                // Bold groupings with current itemSet assigned
                if ($grouping->getItemSet()->getId() == $resource->id()) {
                    echo '<li><b>' . $itemSet->link($grouping->getLabel()) . '</b></li>';
                } else {
                    echo '<li>' . $itemSet->link($grouping->getLabel()) . '</li>';
                }
            }

            // Return any groupings with current grouping as parent
            $childArray = array_filter($allGroupings, function($child) use($grouping) {
                return $child->getParentGrouping() == $grouping->id();
            });

            // Remove already printed groupings from $allGroupings array
            $allGroupings = array_filter($allGroupings, function($child) use($grouping) {
                return $child->id() != $grouping->id();
            });
            
            $printedGroupings[] = $grouping;

            if (count($childArray) > 0) {
                // Handle multidimensional hierarchies by saving/retrieving previous state
                $prevChildArray = $childArray ?: [];
                $childCount = count($childArray);
                echo '<ul>';
                $iterate($childArray, $resource);
                echo '</ul>';
                $childArray = $prevChildArray;
                continue;
            } elseif ($childCount >= 1) {
                // Keep other variables the same if iterating 'sibling'
                $childCount--;
                continue;
            }
        }
    };

    if ($groupings) {
        echo '<dl><div class="property">';
        echo '<dt>' . $translate('Hierarchies') . '</dt>';
        $iterate($groupings, $resource);
        echo '</span></dd></dl>';
    }
}
$options = [];
if ($this->siteSetting('exclude_resources_not_in_site')) {
    $options['siteId'] = $this->currentSite()->id();
}
echo $resource->displayValues($options);
?>
